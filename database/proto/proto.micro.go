// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/proto.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Database service

type DatabaseService interface {
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
}

type databaseService struct {
	c    client.Client
	name string
}

func NewDatabaseService(name string, c client.Client) DatabaseService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "database"
	}
	return &databaseService{
		c:    c,
		name: name,
	}
}

func (c *databaseService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Database.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Database service

type DatabaseHandler interface {
	Query(context.Context, *QueryRequest, *QueryResponse) error
}

func RegisterDatabaseHandler(s server.Server, hdlr DatabaseHandler, opts ...server.HandlerOption) error {
	type database interface {
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
	}
	type Database struct {
		database
	}
	h := &databaseHandler{hdlr}
	return s.Handle(s.NewHandler(&Database{h}, opts...))
}

type databaseHandler struct {
	DatabaseHandler
}

func (h *databaseHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.DatabaseHandler.Query(ctx, in, out)
}
